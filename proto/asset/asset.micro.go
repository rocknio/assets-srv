// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/asset/asset.proto

package rz_assets_srv_asset

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AssetMethod service

type AssetMethodService interface {
	New(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error)
	QueryByAssetName(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error)
	UpdateByAssetId(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error)
	DeleteByAssetId(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error)
}

type assetMethodService struct {
	c    client.Client
	name string
}

func NewAssetMethodService(name string, c client.Client) AssetMethodService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "rz.assets.srv.asset"
	}
	return &assetMethodService{
		c:    c,
		name: name,
	}
}

func (c *assetMethodService) New(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AssetMethod.New", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetMethodService) QueryByAssetName(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AssetMethod.QueryByAssetName", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetMethodService) UpdateByAssetId(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AssetMethod.UpdateByAssetId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetMethodService) DeleteByAssetId(ctx context.Context, in *Asset, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AssetMethod.DeleteByAssetId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AssetMethod service

type AssetMethodHandler interface {
	New(context.Context, *Asset, *Response) error
	QueryByAssetName(context.Context, *Asset, *Response) error
	UpdateByAssetId(context.Context, *Asset, *Response) error
	DeleteByAssetId(context.Context, *Asset, *Response) error
}

func RegisterAssetMethodHandler(s server.Server, hdlr AssetMethodHandler, opts ...server.HandlerOption) error {
	type assetMethod interface {
		New(ctx context.Context, in *Asset, out *Response) error
		QueryByAssetName(ctx context.Context, in *Asset, out *Response) error
		UpdateByAssetId(ctx context.Context, in *Asset, out *Response) error
		DeleteByAssetId(ctx context.Context, in *Asset, out *Response) error
	}
	type AssetMethod struct {
		assetMethod
	}
	h := &assetMethodHandler{hdlr}
	return s.Handle(s.NewHandler(&AssetMethod{h}, opts...))
}

type assetMethodHandler struct {
	AssetMethodHandler
}

func (h *assetMethodHandler) New(ctx context.Context, in *Asset, out *Response) error {
	return h.AssetMethodHandler.New(ctx, in, out)
}

func (h *assetMethodHandler) QueryByAssetName(ctx context.Context, in *Asset, out *Response) error {
	return h.AssetMethodHandler.QueryByAssetName(ctx, in, out)
}

func (h *assetMethodHandler) UpdateByAssetId(ctx context.Context, in *Asset, out *Response) error {
	return h.AssetMethodHandler.UpdateByAssetId(ctx, in, out)
}

func (h *assetMethodHandler) DeleteByAssetId(ctx context.Context, in *Asset, out *Response) error {
	return h.AssetMethodHandler.DeleteByAssetId(ctx, in, out)
}
